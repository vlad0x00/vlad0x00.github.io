#!/usr/bin/env python3

import cv2
import sys
import os
import numpy as np

def lighten_dark_teal(image, threshold=140, lighten_value=100):
    # Convert the input image to HSV color space
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Define the lower and upper bounds for dark teal color
    dark_teal_lower = np.array([70, 50, 20])
    dark_teal_upper = np.array([110, 255, threshold])

    # Create a mask for dark teal color
    mask = cv2.inRange(hsv_image, dark_teal_lower, dark_teal_upper)

    # Blur the mask to create a smooth transition
    blurred_mask = cv2.GaussianBlur(mask, (15, 15), 0)
    alpha_mask = blurred_mask / 255.0

    # Lighten the pixels with dark teal color
    hsv_image = hsv_image.astype(np.int16)
    hsv_image[mask > 0, 2] += lighten_value
    hsv_image = np.clip(hsv_image, 0, 255).astype(np.uint8)

    # Convert the image back to BGR color space
    result_image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2BGR)

    # Create a copy of the original image
    blended_image = image.copy().astype(np.float32)

    # Blend the result with the original image
    for i in range(3):  # iterate over each channel
        blended_image[:, :, i] = (1.0 - alpha_mask) * image[:, :, i].astype(np.float32) + alpha_mask * result_image[:, :, i].astype(np.float32)

    return blended_image.astype(np.uint8)

def set_minimum_brightness(image, min_brightness=200):
    # Separate the color and alpha channels
    color_channels = image[:, :, :3]
    alpha_channel = image[:, :, 3] if image.shape[2] == 4 else None

    # Convert the color channels to HSV color space
    hsv_image = cv2.cvtColor(color_channels, cv2.COLOR_BGR2HSV)

    # Increase the V channel to set a minimum brightness
    hsv_image[:,:,2] = np.maximum(hsv_image[:,:,2], min_brightness)

    # Convert the color channels back to BGR color space
    result_image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2BGR)

    # If the image had an alpha channel, reattach it
    if alpha_channel is not None:
        result_image = np.dstack((result_image, alpha_channel))

    return result_image

def convert_purple_to_green(image):
    # Separate the color and alpha channels
    color_channels = image[:, :, :3]
    alpha_channel = image[:, :, 3] if image.shape[2] == 4 else None

    # Convert the image to HSV color space
    hsv_image = cv2.cvtColor(color_channels, cv2.COLOR_BGR2HSV)

    # Define the range for purple hues
    purple_lower = np.array([250/2, 20, 30], dtype=np.uint8)
    purple_upper = np.array([320/2, 255, 255], dtype=np.uint8)

    # Create a mask for the purple color
    mask = cv2.inRange(hsv_image, purple_lower, purple_upper)

    # Calculate the hue offset for the masked (purple) pixels
    hue_offset = hsv_image[mask > 0, 0] - purple_lower[0]

    # Change the H channel (hue) of the masked (purple) pixels to the hue for green,
    # adding the hue offset to map different purple hues to different green hues
    hsv_image[mask > 0, 0] = (5 + hue_offset) % 180  # 60 corresponds to green in HSV

    # Convert the image back to BGR color space
    result_image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2BGR)

    # If the image had an alpha channel, reattach it
    if alpha_channel is not None:
        result_image = np.dstack((result_image, alpha_channel))

    return result_image

# Load an image
input_image = cv2.imread('cell_layers_transparent.png', cv2.IMREAD_UNCHANGED)

# Separate the color and alpha channels
color_channels = input_image[:, :, :3]
alpha_channel = input_image[:, :, 3]

# Invert the color channels
color_channels = 255 - color_channels

# Merge the color and alpha channels
output_image = np.dstack((color_channels, alpha_channel))

# Lighten dark teal colors
output_image = lighten_dark_teal(output_image)

output_image = set_minimum_brightness(output_image)

output_image = convert_purple_to_green(output_image)

# Save the result
cv2.imwrite("cell_layers.png", output_image)
